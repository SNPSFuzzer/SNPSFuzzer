/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sk-netlink.proto */

#ifndef PROTOBUF_C_sk_2dnetlink_2eproto__INCLUDED
#define PROTOBUF_C_sk_2dnetlink_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "opts.pb-c.h"
#include "fown.pb-c.h"
#include "sk-opts.pb-c.h"

typedef struct _NetlinkSkEntry NetlinkSkEntry;


/* --- enums --- */


/* --- messages --- */

struct  _NetlinkSkEntry
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t ino;
  uint32_t protocol;
  uint32_t state;
  uint32_t flags;
  uint32_t portid;
  size_t n_groups;
  uint32_t *groups;
  uint32_t dst_portid;
  uint32_t dst_group;
  FownEntry *fown;
  SkOptsEntry *opts;
  /*
   * For netlink queued messages
   * optional nl_sk_opts_entry	nl_opts		=  14;
   */
  protobuf_c_boolean has_ns_id;
  uint32_t ns_id;
};
#define NETLINK_SK_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&netlink_sk_entry__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, NULL, NULL, 0,0 }


/* NetlinkSkEntry methods */
void   netlink_sk_entry__init
                     (NetlinkSkEntry         *message);
size_t netlink_sk_entry__get_packed_size
                     (const NetlinkSkEntry   *message);
size_t netlink_sk_entry__pack
                     (const NetlinkSkEntry   *message,
                      uint8_t             *out);
size_t netlink_sk_entry__pack_to_buffer
                     (const NetlinkSkEntry   *message,
                      ProtobufCBuffer     *buffer);
NetlinkSkEntry *
       netlink_sk_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   netlink_sk_entry__free_unpacked
                     (NetlinkSkEntry *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NetlinkSkEntry_Closure)
                 (const NetlinkSkEntry *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor netlink_sk_entry__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sk_2dnetlink_2eproto__INCLUDED */
