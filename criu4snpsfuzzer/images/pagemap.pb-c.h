/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: pagemap.proto */

#ifndef PROTOBUF_C_pagemap_2eproto__INCLUDED
#define PROTOBUF_C_pagemap_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "opts.pb-c.h"

typedef struct _PagemapHead PagemapHead;
typedef struct _PagemapEntry PagemapEntry;


/* --- enums --- */


/* --- messages --- */

struct  _PagemapHead
{
  ProtobufCMessage base;
  uint32_t pages_id;
};
#define PAGEMAP_HEAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pagemap_head__descriptor) \
    , 0 }


struct  _PagemapEntry
{
  ProtobufCMessage base;
  uint64_t vaddr;
  uint32_t nr_pages;
  protobuf_c_boolean has_in_parent;
  protobuf_c_boolean in_parent;
  protobuf_c_boolean has_flags;
  uint32_t flags;
};
#define PAGEMAP_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pagemap_entry__descriptor) \
    , 0, 0, 0,0, 0,0 }


/* PagemapHead methods */
void   pagemap_head__init
                     (PagemapHead         *message);
size_t pagemap_head__get_packed_size
                     (const PagemapHead   *message);
size_t pagemap_head__pack
                     (const PagemapHead   *message,
                      uint8_t             *out);
size_t pagemap_head__pack_to_buffer
                     (const PagemapHead   *message,
                      ProtobufCBuffer     *buffer);
PagemapHead *
       pagemap_head__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pagemap_head__free_unpacked
                     (PagemapHead *message,
                      ProtobufCAllocator *allocator);
/* PagemapEntry methods */
void   pagemap_entry__init
                     (PagemapEntry         *message);
size_t pagemap_entry__get_packed_size
                     (const PagemapEntry   *message);
size_t pagemap_entry__pack
                     (const PagemapEntry   *message,
                      uint8_t             *out);
size_t pagemap_entry__pack_to_buffer
                     (const PagemapEntry   *message,
                      ProtobufCBuffer     *buffer);
PagemapEntry *
       pagemap_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pagemap_entry__free_unpacked
                     (PagemapEntry *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PagemapHead_Closure)
                 (const PagemapHead *message,
                  void *closure_data);
typedef void (*PagemapEntry_Closure)
                 (const PagemapEntry *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor pagemap_head__descriptor;
extern const ProtobufCMessageDescriptor pagemap_entry__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_pagemap_2eproto__INCLUDED */
