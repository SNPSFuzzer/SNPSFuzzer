/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: core-aarch64.proto */

#ifndef PROTOBUF_C_core_2daarch64_2eproto__INCLUDED
#define PROTOBUF_C_core_2daarch64_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "opts.pb-c.h"

typedef struct _UserAarch64RegsEntry UserAarch64RegsEntry;
typedef struct _UserAarch64FpsimdContextEntry UserAarch64FpsimdContextEntry;
typedef struct _ThreadInfoAarch64 ThreadInfoAarch64;


/* --- enums --- */


/* --- messages --- */

struct  _UserAarch64RegsEntry
{
  ProtobufCMessage base;
  size_t n_regs;
  uint64_t *regs;
  uint64_t sp;
  uint64_t pc;
  uint64_t pstate;
};
#define USER_AARCH64_REGS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_aarch64_regs_entry__descriptor) \
    , 0,NULL, 0, 0, 0 }


struct  _UserAarch64FpsimdContextEntry
{
  ProtobufCMessage base;
  size_t n_vregs;
  uint64_t *vregs;
  uint32_t fpsr;
  uint32_t fpcr;
};
#define USER_AARCH64_FPSIMD_CONTEXT_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_aarch64_fpsimd_context_entry__descriptor) \
    , 0,NULL, 0, 0 }


struct  _ThreadInfoAarch64
{
  ProtobufCMessage base;
  uint64_t clear_tid_addr;
  uint64_t tls;
  UserAarch64RegsEntry *gpregs;
  UserAarch64FpsimdContextEntry *fpsimd;
};
#define THREAD_INFO_AARCH64__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&thread_info_aarch64__descriptor) \
    , 0, 0, NULL, NULL }


/* UserAarch64RegsEntry methods */
void   user_aarch64_regs_entry__init
                     (UserAarch64RegsEntry         *message);
size_t user_aarch64_regs_entry__get_packed_size
                     (const UserAarch64RegsEntry   *message);
size_t user_aarch64_regs_entry__pack
                     (const UserAarch64RegsEntry   *message,
                      uint8_t             *out);
size_t user_aarch64_regs_entry__pack_to_buffer
                     (const UserAarch64RegsEntry   *message,
                      ProtobufCBuffer     *buffer);
UserAarch64RegsEntry *
       user_aarch64_regs_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_aarch64_regs_entry__free_unpacked
                     (UserAarch64RegsEntry *message,
                      ProtobufCAllocator *allocator);
/* UserAarch64FpsimdContextEntry methods */
void   user_aarch64_fpsimd_context_entry__init
                     (UserAarch64FpsimdContextEntry         *message);
size_t user_aarch64_fpsimd_context_entry__get_packed_size
                     (const UserAarch64FpsimdContextEntry   *message);
size_t user_aarch64_fpsimd_context_entry__pack
                     (const UserAarch64FpsimdContextEntry   *message,
                      uint8_t             *out);
size_t user_aarch64_fpsimd_context_entry__pack_to_buffer
                     (const UserAarch64FpsimdContextEntry   *message,
                      ProtobufCBuffer     *buffer);
UserAarch64FpsimdContextEntry *
       user_aarch64_fpsimd_context_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_aarch64_fpsimd_context_entry__free_unpacked
                     (UserAarch64FpsimdContextEntry *message,
                      ProtobufCAllocator *allocator);
/* ThreadInfoAarch64 methods */
void   thread_info_aarch64__init
                     (ThreadInfoAarch64         *message);
size_t thread_info_aarch64__get_packed_size
                     (const ThreadInfoAarch64   *message);
size_t thread_info_aarch64__pack
                     (const ThreadInfoAarch64   *message,
                      uint8_t             *out);
size_t thread_info_aarch64__pack_to_buffer
                     (const ThreadInfoAarch64   *message,
                      ProtobufCBuffer     *buffer);
ThreadInfoAarch64 *
       thread_info_aarch64__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   thread_info_aarch64__free_unpacked
                     (ThreadInfoAarch64 *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*UserAarch64RegsEntry_Closure)
                 (const UserAarch64RegsEntry *message,
                  void *closure_data);
typedef void (*UserAarch64FpsimdContextEntry_Closure)
                 (const UserAarch64FpsimdContextEntry *message,
                  void *closure_data);
typedef void (*ThreadInfoAarch64_Closure)
                 (const ThreadInfoAarch64 *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor user_aarch64_regs_entry__descriptor;
extern const ProtobufCMessageDescriptor user_aarch64_fpsimd_context_entry__descriptor;
extern const ProtobufCMessageDescriptor thread_info_aarch64__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_core_2daarch64_2eproto__INCLUDED */
