/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cpuinfo.proto */

#ifndef PROTOBUF_C_cpuinfo_2eproto__INCLUDED
#define PROTOBUF_C_cpuinfo_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _CpuinfoX86Entry CpuinfoX86Entry;
typedef struct _CpuinfoPpc64Entry CpuinfoPpc64Entry;
typedef struct _CpuinfoS390Entry CpuinfoS390Entry;
typedef struct _CpuinfoEntry CpuinfoEntry;


/* --- enums --- */

typedef enum _CpuinfoX86Entry__Vendor {
  CPUINFO_X86_ENTRY__VENDOR__UNKNOWN = 0,
  CPUINFO_X86_ENTRY__VENDOR__INTEL = 1,
  CPUINFO_X86_ENTRY__VENDOR__AMD = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CPUINFO_X86_ENTRY__VENDOR)
} CpuinfoX86Entry__Vendor;
typedef enum _CpuinfoPpc64Entry__Endianness {
  CPUINFO_PPC64_ENTRY__ENDIANNESS__BIGENDIAN = 0,
  CPUINFO_PPC64_ENTRY__ENDIANNESS__LITTLEENDIAN = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CPUINFO_PPC64_ENTRY__ENDIANNESS)
} CpuinfoPpc64Entry__Endianness;

/* --- messages --- */

struct  _CpuinfoX86Entry
{
  ProtobufCMessage base;
  CpuinfoX86Entry__Vendor vendor_id;
  uint32_t cpu_family;
  uint32_t model;
  uint32_t stepping;
  uint32_t capability_ver;
  size_t n_capability;
  uint32_t *capability;
  char *model_id;
  protobuf_c_boolean has_xfeatures_mask;
  uint64_t xfeatures_mask;
  protobuf_c_boolean has_xsave_size;
  uint32_t xsave_size;
  protobuf_c_boolean has_xsave_size_max;
  uint32_t xsave_size_max;
};
#define CPUINFO_X86_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cpuinfo_x86_entry__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, NULL, 0,0, 0,0, 0,0 }


struct  _CpuinfoPpc64Entry
{
  ProtobufCMessage base;
  CpuinfoPpc64Entry__Endianness endian;
  size_t n_hwcap;
  uint64_t *hwcap;
};
#define CPUINFO_PPC64_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cpuinfo_ppc64_entry__descriptor) \
    , 0, 0,NULL }


struct  _CpuinfoS390Entry
{
  ProtobufCMessage base;
  size_t n_hwcap;
  uint64_t *hwcap;
};
#define CPUINFO_S390_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cpuinfo_s390_entry__descriptor) \
    , 0,NULL }


struct  _CpuinfoEntry
{
  ProtobufCMessage base;
  /*
   * Usually on SMP system there should be same CPUs
   * installed, but it might happen that system carries
   * various CPUs so @repeated used.
   */
  size_t n_x86_entry;
  CpuinfoX86Entry **x86_entry;
  size_t n_ppc64_entry;
  CpuinfoPpc64Entry **ppc64_entry;
  size_t n_s390_entry;
  CpuinfoS390Entry **s390_entry;
};
#define CPUINFO_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cpuinfo_entry__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


/* CpuinfoX86Entry methods */
void   cpuinfo_x86_entry__init
                     (CpuinfoX86Entry         *message);
size_t cpuinfo_x86_entry__get_packed_size
                     (const CpuinfoX86Entry   *message);
size_t cpuinfo_x86_entry__pack
                     (const CpuinfoX86Entry   *message,
                      uint8_t             *out);
size_t cpuinfo_x86_entry__pack_to_buffer
                     (const CpuinfoX86Entry   *message,
                      ProtobufCBuffer     *buffer);
CpuinfoX86Entry *
       cpuinfo_x86_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cpuinfo_x86_entry__free_unpacked
                     (CpuinfoX86Entry *message,
                      ProtobufCAllocator *allocator);
/* CpuinfoPpc64Entry methods */
void   cpuinfo_ppc64_entry__init
                     (CpuinfoPpc64Entry         *message);
size_t cpuinfo_ppc64_entry__get_packed_size
                     (const CpuinfoPpc64Entry   *message);
size_t cpuinfo_ppc64_entry__pack
                     (const CpuinfoPpc64Entry   *message,
                      uint8_t             *out);
size_t cpuinfo_ppc64_entry__pack_to_buffer
                     (const CpuinfoPpc64Entry   *message,
                      ProtobufCBuffer     *buffer);
CpuinfoPpc64Entry *
       cpuinfo_ppc64_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cpuinfo_ppc64_entry__free_unpacked
                     (CpuinfoPpc64Entry *message,
                      ProtobufCAllocator *allocator);
/* CpuinfoS390Entry methods */
void   cpuinfo_s390_entry__init
                     (CpuinfoS390Entry         *message);
size_t cpuinfo_s390_entry__get_packed_size
                     (const CpuinfoS390Entry   *message);
size_t cpuinfo_s390_entry__pack
                     (const CpuinfoS390Entry   *message,
                      uint8_t             *out);
size_t cpuinfo_s390_entry__pack_to_buffer
                     (const CpuinfoS390Entry   *message,
                      ProtobufCBuffer     *buffer);
CpuinfoS390Entry *
       cpuinfo_s390_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cpuinfo_s390_entry__free_unpacked
                     (CpuinfoS390Entry *message,
                      ProtobufCAllocator *allocator);
/* CpuinfoEntry methods */
void   cpuinfo_entry__init
                     (CpuinfoEntry         *message);
size_t cpuinfo_entry__get_packed_size
                     (const CpuinfoEntry   *message);
size_t cpuinfo_entry__pack
                     (const CpuinfoEntry   *message,
                      uint8_t             *out);
size_t cpuinfo_entry__pack_to_buffer
                     (const CpuinfoEntry   *message,
                      ProtobufCBuffer     *buffer);
CpuinfoEntry *
       cpuinfo_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cpuinfo_entry__free_unpacked
                     (CpuinfoEntry *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CpuinfoX86Entry_Closure)
                 (const CpuinfoX86Entry *message,
                  void *closure_data);
typedef void (*CpuinfoPpc64Entry_Closure)
                 (const CpuinfoPpc64Entry *message,
                  void *closure_data);
typedef void (*CpuinfoS390Entry_Closure)
                 (const CpuinfoS390Entry *message,
                  void *closure_data);
typedef void (*CpuinfoEntry_Closure)
                 (const CpuinfoEntry *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cpuinfo_x86_entry__descriptor;
extern const ProtobufCEnumDescriptor    cpuinfo_x86_entry__vendor__descriptor;
extern const ProtobufCMessageDescriptor cpuinfo_ppc64_entry__descriptor;
extern const ProtobufCEnumDescriptor    cpuinfo_ppc64_entry__endianness__descriptor;
extern const ProtobufCMessageDescriptor cpuinfo_s390_entry__descriptor;
extern const ProtobufCMessageDescriptor cpuinfo_entry__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cpuinfo_2eproto__INCLUDED */
